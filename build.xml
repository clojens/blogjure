<?xml version="1.0" encoding="UTF-8"?>

<project name="Blogjure" basedir="." default="package">
    <!-- Built-in property : basedir -->
    <property name="source.dir"             value="${basedir}/src"/>
    <property name="templates.dir"          value="${basedir}/st"/>
    <property name="test.source.dir"        value="${basedir}/test"/>
    <property name="public.dir"             value="${basedir}/public"/>
    
    <property name="conf.dir"               value="${basedir}/conf"/>
    <property name="web.xml.file"           value="${conf.dir}/web.xml"/>
    
    <property name="lib.bundled.dir"        value="${basedir}/lib/bundled"/>
    <property name="lib.not.bundled.dir"    value="${basedir}/lib/not-bundled"/>
    
    <property name="build.dir"              value="${basedir}/build"/>
    <property name="build.classes.dir"      value="${build.dir}/classes"/>
    <property name="build.test.classes.dir" value="${build.dir}/test-classes"/>
    <property name="build.test.report.dir"  value="${build.dir}/test-report"/>
    
    <property name="dist.dir"               value="${build.dir}/dist"/>
    <property name="dist.apidoc.dir"        value="${dist.dir}/docs/api"/>
    <property name="dist.war.file"          value="blogjure.war"/>
    
    
    <fileset dir="${public.dir}" id="public">
            <include name="**" />
    </fileset>
    
    <fileset dir="${lib.bundled.dir}" id="lib.bundled">
        <include name="*.jar" />
    </fileset>
    <fileset dir="${lib.not.bundled.dir}" id="lib.not.bundled">
        <include name="*.jar" />
    </fileset>
    
    <target name="init" description="Sets up environment for build process">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.test.classes.dir}"/>
        <mkdir dir="${build.test.report.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <!--<mkdir dir="${build.classes.dir}/conf"/>-->
    </target>
    
    <target name="clean" description="Cleans up artifacts generated by build process">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    
    <target name="compile-java" depends="init" description="Compile Java classes">
        <javac srcdir="${source.dir}" destdir="${build.classes.dir}" debug="on" >
            <classpath>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
        </javac>
    </target>
    
    <target name="compile-clojure" depends="init" description="Compile Clojure sources">
        <!-- WARNING: inputstring is parsed as a single line - do not put Clojure comments -->
        <java classname="clojure.lang.Repl" fork="true" failonerror="true"
            inputstring="
            (compile 'blogjure.mvc.blog_servlet)
            (compile 'blogjure.mvc.serve_static_file)
            (compile 'blogjure.model.hibernate_util)
            "
        >
            <classpath>
                <path location="${build.classes.dir}"/>
                <path location="${source.dir}"/>
                <path location="${conf.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
            <sysproperty key="clojure.compile.path" value="${build.classes.dir}"/>
        </java>
        <!--
        <java classname="clojure.lang.Compile" fork="true" failonerror="true">
            <classpath>
                <path location="${build.classes.dir}"/>
                <path location="${source.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
            <sysproperty key="clojure.compile.path" value="${build.classes.dir}"/>
            <arg value="blogjure.db.datasource"/>
        </java>
        -->
    </target>
    
    <target name="compile-templates" depends="init" description="Compile all templates">
        <copy todir="${build.classes.dir}">
            <fileset dir="${templates.dir}"/>
        </copy>
    </target>
    
    <target name="compile" depends="compile-java,compile-clojure,compile-templates" description="Compile all sources">
        <!-- empty -->
    </target>
    
    <target name="war" depends="compile" description="Build deployable WAR file">
        <war destfile="${dist.dir}/${dist.war.file}" webxml="${web.xml.file}">
            <classes dir="${build.classes.dir}" />
            <lib dir="${lib.bundled.dir}" />
            <fileset refid="public" />
            <zipfileset dir="${conf.dir}" includes="**/hibernate.properties"
                    prefix="WEB-INF/classes" />
        </war>
    </target>
    
    <target name="compile-java-tests" depends="compile" description="Compile Java test classes">
        <javac srcdir="${test.source.dir}" destdir="${build.test.classes.dir}" debug="on" >
            <classpath>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
        </javac>
    </target>
    
    <target name="compile-clojure-tests-dont-use" depends="compile-java-tests" description="Compile Clojure test sources">
        <java classname="clojure.lang.Compile" fork="false" failonerror="true">
            <classpath>
                <path location="${build.classes.dir}"/>
                <path location="${build.test.classes.dir}"/>
                <path location="${source.dir}"/>
                <path location="${test.source.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
            <sysproperty key="clojure.compile.path" value="${build.test.classes.dir}"/>
            <arg value="blogjure.in_process_test_environment"/>
        </java>
        <java classname="clojure.lang.Compile" fork="false" failonerror="true">
            <classpath>
                <path location="${build.classes.dir}"/>
                <path location="${build.test.classes.dir}"/>
                <path location="${source.dir}"/>
                <path location="${test.source.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
            <sysproperty key="clojure.compile.path" value="${build.test.classes.dir}"/>
            <arg value="blogjure.run_tests"/>
        </java>
    </target>

    <target name="compile-clojure-tests" depends="compile-clojure" description="Compile Clojure test sources">
        <java classname="clojure.lang.Repl" fork="false" failonerror="true"
            inputstring="
            (compile 'blogjure.mvc.test_serve_static_file)
            (compile 'blogjure.db.test_datasource)
            "
        >
            <classpath>
                <path location="${build.classes.dir}"/>
                <path location="${build.test.classes.dir}"/>
                <path location="${source.dir}"/>
                <path location="${test.source.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
            <sysproperty key="clojure.compile.path" value="${build.test.classes.dir}"/>
        </java>
    </target>
    
    <target name="compile-tests" depends="compile-java-tests,compile-clojure-tests" description="Compile test sources">
        <!-- empty -->
    </target>
    
    <target name="run-tests" depends="compile,compile-tests" description="Run Tests">
        <java classname="clojure.lang.Repl"
            fork="yes"
            failonerror="true"
            inputstring="
            (compile 'blogjure.run_tests)
            "
            >
            <classpath>
            <!-- -->
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
                <pathelement path="${build.classes.dir}" />
                <pathelement path="${build.test.classes.dir}" />
                <pathelement path="${source.dir}" />
                <pathelement path="${test.source.dir}" />
            <!-- -->
            <!--
                <path location="${build.classes.dir}"/>
                <path location="${build.test.classes.dir}"/>
                <path location="${source.dir}"/>
                <path location="${test.source.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            -->
            </classpath>
            <sysproperty key="clojure.compile.path" value="${build.test.classes.dir}"/>
            <!--<arg value="blogjure.run_tests"/>-->
        </java>
    </target>
    
    <target name="package" depends="war" description="Package application as a distributable">
        <!-- TODO: run automated tests -->
    </target>
    
    <target name="run-ipte" depends="compile,compile-tests" description="Run In-Process Test Environment">
        <java classname="clojure.lang.Compile"
            fork="yes"
            >
            <classpath>
            <!--
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
                <pathelement path="${build.classes.dir}" />
                <pathelement path="${build.test.classes.dir}" />
                <pathelement path="${source.dir}" />
                <pathelement path="${test.source.dir}" />
            -->
            <!-- -->
                <path location="${build.classes.dir}"/>
                <path location="${build.test.classes.dir}"/>
                <path location="${source.dir}"/>
                <path location="${test.source.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            <!-- -->
            </classpath>
        	<sysproperty key="clojure.compile.path" value="${build.test.classes.dir}"/>
            <arg value="blogjure.in_process_test_environment"/>
        </java>
    </target>
    
    <target name="run" depends="run-ipte" description="Run the app">
        <!-- empty -->
    </target>
    
    <target name="java-apidoc" depends="init" description="Generate doc for Java sources">
        <javadoc
            sourcepath="${source.dir}"
            destdir="${dist.apidoc.dir}"
            includenosourcepackages="true"
            >
        </javadoc>
    </target>
    
    <target name="clojure-apidoc" depends="init" description="Generate doc for Clojure sources">
        <path id="dist.apidoc.path">
            <pathelement location="${dist.apidoc.dir}"/>
        </path>
        <pathconvert targetos="unix" property="dist.apidoc.path.unix" refid="dist.apidoc.path"/>
        <java classname="clojure.lang.Repl"
            fork="yes"
            inputstring='(ns build (:use clojure.contrib.gen-html-docs)) (generate-documentation-to-file "${dist.apidoc.path.unix}/clj.html" [(quote blogjure.mvc.blog_servlet)])'
            >
            <!--
            [(quote org.blogjure.*)]
            inputstring="(generate-documentation-to-file \"${dist.apidoc.dir}/clj.html\" [\'org.blogjure])"
            -->
            <classpath>
            <!--
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
                <pathelement path="${build.classes.dir}" />
                <pathelement path="${build.test.classes.dir}" />
                <pathelement path="${source.dir}" />
                <pathelement path="${test.source.dir}" />
            -->
                <path location="${build.classes.dir}"/>
                <path location="${build.test.classes.dir}"/>
                <path location="${source.dir}"/>
                <path location="${test.source.dir}"/>
                <fileset refid="lib.bundled" />
                <fileset refid="lib.not.bundled" />
            </classpath>
            <!--
            <arg value="blogjure.in_process_test_environment.clj"/>
            -->
        </java>
    </target>
    
    <target name="doc" depends="java-apidoc,clojure-apidoc" description="Generate documentation for the project">
        <!-- empty -->
    </target>
    
</project>